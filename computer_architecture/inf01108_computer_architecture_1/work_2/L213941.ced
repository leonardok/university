;> Inicializacao do apontador da pilha
;> para que a pilha fique acima da area
;> de memoria mapeada para entrada e saida
;> ESTAS DUAS INSTRUCOES DEVEM SER MANTIDAS AQUI !
          ORG 0                 ; primeira instrucao de qualquer 
          MOV #65498,R6         ; programa: aponta SP para 65498



; LFSR (Linear Feedback Shift Register) para calcular
; produtos de números inteiros sem sinal de 14 bits, 
; gerados de forma pseudoaleatória, exibindo cada
; produto no visor


	JSR R7, S_IMPRIME_MENSAGEM_DE_BOAS_VINDAS
	JSR R7, S_PEGA_SEMENTE
	MOV R5, VAR_seed_number			; keep seed numeric value


	MOV #36, R0				; tamanho da mensagem (em caracteres)
	MOV END_STR_SEQ_PROD, R1		; endereco da mensagem a ser escrita no visor
	MOV #65500, R2				; endereco do LED onde deve iniciar a mensagem
	JSR R7, _S_ESCREVER_NO_VISOR

	JSR R7, S_ESPERA_ENTER

MAIN_LOOP_PRODUCTS:
	JSR R7,_S_LIMPA_VISOR_ITERATIVA
	INC VAR_loop_number

	; write loop number
	MOV VAR_loop_number, R0
	MOV #65500, R1
	JSR R7,S_WRITE_16B_NUMBER_TO_LCD

	MOV #58, (R1)+				; write ':'
	MOV R1, VAR_last_lcd_pos


	;>
	;> Make first factor and write it to the screen
	;>
	MOV VAR_seed_number, R0			; seed number to start from
	JSR R7,S_GERA_PRANDOM

	MOV R0, VAR_seed_number
	MOV R0, VAR_first_factor


	; write first factor
	MOV VAR_last_lcd_pos, R1
	JSR R7,S_WRITE_16B_NUMBER_TO_LCD
	MOV R1, VAR_last_lcd_pos

	INC R1
	MOV #120, (R1)+				; write 'x'
	MOV R1, VAR_last_lcd_pos


	;>
	;> Make second factor and write it to the screen
	;>

	MOV VAR_first_factor, R0

	JSR R7,S_GERA_PRANDOM
	MOV R0, VAR_second_factor

	; write second factor
	MOV VAR_last_lcd_pos, R1
	JSR R7,S_WRITE_16B_NUMBER_TO_LCD
	MOV R1, VAR_last_lcd_pos

	INC R1
	MOV #61, (R1)+				; write '='
	MOV R1, VAR_last_lcd_pos

	MOV VAR_first_factor,  R0
	MOV VAR_second_factor, R1
	MOV R1, VAR_seed_number

	;>
	;> at this point both R0 and R1 have the newest randoms, so we don't
	;> have to make the following calls:
	;>
	;> MOV #multiplicando,R0        ; multiplicando no R0
	;> MOV #multiplicador,R1        ; multiplicador no R1
	;>
	;> - R0 contém os 16 msbits do produto
	;> - R1 contém os 16 lsbits do produto

	JSR R7,_S_MULTIPLICAR

	;> #############################
	;> # GERA ASCII PARA IMPRIMIR  #
	;> #############################
	
	;> Pega a primeira parte para fazer
	MOV #10000, R2
	JSR R7,_S_DIVIDIR
	MOV R0, R3

	MOV R1,  R0			; R1 contem o resto da divisao por 100000.
	MOV #0,  R5			; R5 will be the counter

	MOV #10, R2
MAIN_LACO_1:
	MOV R0,  R1
	MOV #0,  R0
	JSR R7,_S_DIVIDIR

	ADD #48, R1
	MOV R1, -(R6)
	INC R5

	CMP #0, R0
	BNE MAIN_LACO_1
	
	MOV R3, R0			; only to make the loop

MAIN_LACO_2:
	MOV R0, R1
	MOV #0, R0
	JSR R7,_S_DIVIDIR

	ADD #48, R1
	MOV R1, -(R6)
	INC R5

	CMP #0, R0
	BNE MAIN_LACO_2


	MOV VAR_last_lcd_pos, R4	

MAIN_WRITE_ON_SCREEN:
	MOV (R6)+, R0

	CMP R0, #47
	BLT SKIP_PRINT

	MOV R0, (R4)
	INC R4

SKIP_PRINT:
	SOB R5, MAIN_WRITE_ON_SCREEN


	JSR R7,S_ESPERA_ENTER_ESC
	

	CMP 65499, #13
	BEQ MAIN_LOOP_PRODUCTS_JUMP


MAIN_DIGITAR_NOVAMENTE:
	; digitou ESC
	MOV #36, R0				; tamanho da mensagem (em caracteres)
	MOV END_STR_ESC_PRESSED, R1		; endereco da mensagem a ser escrita no visor
	MOV #65500, R2				; endereco do LED onde deve iniciar a mensagem
	JSR R7, _S_ESCREVER_NO_VISOR
	
	JSR R7,S_ESPERA_QUALQUER_TECLA
	
	CMP 65499, #110
	BEQ MAIN_GOOD_BAY
	CMP 65499, #78
	BEQ MAIN_GOOD_BAY


	CMP 65499, #115
	BEQ MAIN_LOOP_PRODUCTS_JUMP
	CMP 65499, #83
	BEQ MAIN_LOOP_PRODUCTS_JUMP

	; nao digitou certo
	MOV #36, R0				; tamanho da mensagem (em caracteres)
	MOV END_STR_S_OR_N_ONLY, R1		; endereco da mensagem a ser escrita no visor
	MOV #65500, R2				; endereco do LED onde deve iniciar a mensagem
	JSR R7, _S_ESCREVER_NO_VISOR

	JSR R7,S_ESPERA_QUALQUER_TECLA

	JMP MAIN_DIGITAR_NOVAMENTE
	

MAIN_GOOD_BAY:
	MOV #36, R0				; tamanho da mensagem (em caracteres)
	MOV END_STR_BYEBYE, R1			; endereco da mensagem a ser escrita no visor
	MOV #65500, R2				; endereco do LED onde deve iniciar a mensagem
	JSR R7, _S_ESCREVER_NO_VISOR
	HLT


MAIN_LOOP_PRODUCTS_JUMP:
	JMP MAIN_LOOP_PRODUCTS








;>---------------------------------------------<
;> AS SUBROTINAS DEVEM INICIAR SOMENTE APOS A  <
;> ULTIMA INSTRUCAO CODIFICADA NO PROGRAMA !!  <
;>---------------------------------------------<

;> Subroutine to write a 16bits number to the screen
;>
;> Chamada da subrotina:
;> MOV #number,R0				; from the number in R1
;> MOV #lcd_start_position, R1
;> JSR R7,S_WRITE_16B_NUMBER_TO_LCD
;>
;> Return:
;> - R1 stays with last LCD position written
;>
S_WRITE_16B_NUMBER_TO_LCD:
	;> TODO: erase unedded!!!!!
	MOV R0, -(R6)				; save R0 in stack
	MOV R2, -(R6)				; save R2 in stack
	MOV R3, -(R6)				; save R3 in stack
	MOV R4, -(R6)				; save R4 in stack
	MOV R5, -(R6)				; save R5 in stack

	MOV R1,  R4				; LCD position
	MOV #0,  R5				; size counter
	MOV #10, R2				; divisor

S_WRITE_16B_NUMBER_TO_LCD_LOOP:
	MOV R0, R1
	MOV #0, R0
	JSR R7,_S_DIVIDIR

	ADD #48, R1
	MOV R1, -(R6)
	INC R5

	CMP #0, R0
	BNE S_WRITE_16B_NUMBER_TO_LCD_LOOP

S_WRITE_16B_NUMBER_TO_LCD_WRITE:
	MOV (R6)+, (R4)
	INC R4

	SOB R5, S_WRITE_16B_NUMBER_TO_LCD_WRITE

	MOV R4, R1


	MOV (R6)+, R5		; rescue R5 from stack
	MOV (R6)+, R4		; rescue R4 from stack
	MOV (R6)+, R3		; rescue R3 from stack
	MOV (R6)+, R2		; rescue R2 from stack
	MOV (R6)+, R0		; rescue R0 from stack

	RTS R7			; retorna ao ponto de chamada




;> Subrotina para gerar numeros pseudo randomicos baseados
;> em um LSFR de 14bits, onde:
;> +--+--+--+--+--+--+--+--+--+--+--+--+--+--+
;> |13|12|11|10| 9| 8| 7| 6| 5| 4| 3| 2| 1| 0|
;> +--+--+--+--+--+--+--+--+--+--+--+--+--+--+
;>  ^|     |     |                          |
;>  ||     |     +-->---------------------+ |
;>  ||     +-->-------------------------+ | |
;>  |+-->-----------------------------+ | | |
;>  |                                 | | | |
;>  +--------<-----<-----<---------+  +-XOR-+
;>                                 |     |
;>                                 +-----+
;>
;> 11 1011 1010 1010 - 15274
;> |  | |          |
;> |  | +--------+ |
;> |  |          1 0
;> |  +---------+ *
;> |            1 1
;> +-----------+ *
;>             1 0
;>              1
;>
;> Chamada da subrotina:
;>
;> MOV #seedValue, R0			; seed number to start from
;> JSR R7,S_GERA_PRANDOM
;>
;> No retorno da subrotina:
;> - R0 contém o valor numerico gerado
;>
S_GERA_PRANDOM:
	; Save all needed registers but not R0
	MOV R1, -(R6)				; save R1 in stack       > TODO: erase unedded!!!!!
	MOV R2, -(R6)				; save R2 in stack
	MOV R3, -(R6)				; save R3 in stack
	MOV R4, -(R6)				; save R4 in stack
	MOV R5, -(R6)				; save R5 in stack


	;>
	;> Prepare (rotate) to seed for the XORing process
	;>

	MOV #1, R1				; get last bit from R0
	AND R0, R1
	
	ASR R0					; shift right all
	AND #8191, R0				; AND it with 1111111111111 to make sure 14th is 0

	MOV #13, R5				; set counter
S_GERA_PRANDOM_SHIFT_01:			; and
	ASL R1					; shift R1 << 13
	SOB R5, S_GERA_PRANDOM_SHIFT_01

	OR  R1, R0				; generate new rotated number
	MOV R0, R2				; save current number in R2


	;>
	;> Start the XORing
	;>	
	; get bit 1
	
	MOV R2, R1				; from the number in R1
	MOV #1, R0				; bit mask for the position we want
	JSR R7,S_GET_BIT_FROM_WORD

	MOV R0, R3				; keep the first number for the XOR


	MOV R2, R1				; from the number in R1
	MOV #512, R0				; bit mask for the position we want
	JSR R7,S_GET_BIT_FROM_WORD

	; do the xor for the two first numbers.
	MOV R3, R1				; R0 already has a bit for XOR
	JSR R7,S_BIT_XOR			; so feed only R1 with the other
	MOV R0, R3				; and give back the result to R3


	MOV R2, R1				; from the number in R1
	MOV #2048, R0				; bit mask for the position we want
	JSR R7,S_GET_BIT_FROM_WORD

	; do the xor for the three first numbers.
	MOV R3, R1				; R0 already has a bit for XOR
	JSR R7,S_BIT_XOR			; so feed only R1 with the other
	MOV R0, R3				; and give back the result to R3


	MOV R2, R1				; from the number in R1
	MOV #8192, R0				; bit mask for the position we want
	JSR R7,S_GET_BIT_FROM_WORD

	; do the xor for all four numbers.
	MOV R3, R1				; R0 already has a bit for XOR
	JSR R7,S_BIT_XOR			; so feed only R1 with the other
	MOV R0, R3				; and give back the result to R3


	;>
	;> Now we have the XORed bit in R3 and R0, we can now clean the 14th
	;> bit on the seed to AND it with the XORed bit
	;>

	MOV R3, R1				; put the xored bit in R1	
	MOV R2, R0				; get number in R0
	AND #8191, R0				; clean 14th bit

	MOV #13, R5				; set counter
S_GERA_PRANDOM_SHIFT_02:			; and
	ASL R1					; shift R1 << 13
	SOB R5, S_GERA_PRANDOM_SHIFT_02

	OR  R1, R0

	;>
	;> All good, exit now.
	;> Remenber, R0 has the new seed!!!!
	;>

	MOV (R6)+, R5		; rescue R5 from stack
	MOV (R6)+, R4		; rescue R4 from stack
	MOV (R6)+, R3		; rescue R3 from stack
	MOV (R6)+, R2		; rescue R2 from stack
	MOV (R6)+, R1		; rescue R1 from stack


	RTS R7			; retorna ao ponto de chamada






;> Subroutine to get a bit from an address
;>
;> Chamada da subrotina:
;> MOV #bit,   R0				; bit position we want
;> MOV #number,R1				; from the number in R1
;> JSR R7,S_GET_BIT_FROM_WORD
;>
;> No retorno da subrotina:
;> - R0 will contain the bit
;>
S_GET_BIT_FROM_WORD:
	MOV R1, -(R6)		; save R1 in stack       > TODO: erase unedded!!!!!
	MOV R2, -(R6)		; save R2 in stack
	MOV R3, -(R6)		; save R3 in stack
	MOV R4, -(R6)		; save R4 in stack
	MOV R5, -(R6)		; save R5 in stack

	MOV #0, R3		; assume is 0

	AND R1, R0		; AND both and check if the result is 0
	CMP #0, R0		; if it is than also our bit is 0, give 0 back
	BEQ S_GET_BIT_FROM_WORD_TERMINATE
	
	MOV #1, R3		; if gets here than the bit is 1

S_GET_BIT_FROM_WORD_TERMINATE:
	MOV R3, R0		; save our bit to R0 (return)

	MOV (R6)+, R5		; rescue R5 from stack
	MOV (R6)+, R4		; rescue R4 from stack
	MOV (R6)+, R3		; rescue R3 from stack
	MOV (R6)+, R2		; rescue R2 from stack
	MOV (R6)+, R1		; rescue R1 from stack
	RTS R7			; retorna ao ponto de chamada




;> Subrotina para fazer XOR de dois bits.
;>
;> Chamada da subrotina:
;> MOV #bit0,R0
;> MOV #bit1,R1
;> JSR R7,S_BIT_XOR
;>
;> No retorno da subrotina:
;> - R0 contem o resultado do XOR
;>
S_BIT_XOR:
	MOV R2,-(R6)		; save R2 in stack
	MOV R3,-(R6)		; save R3 in stack


	MOV R0, R2
	NOT R2
	AND #1, R2

	MOV R1, R3
	NOT R3
	AND #1, R3

	AND R2, R1
	AND R3, R0
	OR  R1, R0

	
	MOV (R6)+, R3		; rescue R2 from stack
	MOV (R6)+, R2		; rescue R3 from stack
	RTS R7			; return from call




;> Subrotina para escrever a mensagem que pede ao usuario
;> a semente para a geracao dos numeros pseudo randomicos.
;> Esta funcao esta separada pois pode ser chamada novamente,
;> para mudar a semente.
;>
;> No retorno da subrotina devolve a semente no R5 em decimal
;>
;> Dentro da subrotina:
;> - R2: tamanho do numero
;> - R3: contador de caracteres do ascii
;> - R4: codigo ascii atual do numero atual
;> - R5: semente em valor numerico
;>
;> Chamada da subrotina:
;>
;> JSR R7,S_PEGA_SEMENTE
;>
;> No retorno da subrotina:
;> - R5 contém o valor numerico dos digitos inseridos
;>
S_PEGA_SEMENTE:
	MOV R0,-(R6)          ; salva R0 na pilha
	MOV R1,-(R6)          ; salva R1 na pilha
	MOV R2,-(R6)          ; salva R1 na pilha
	MOV R3,-(R6)          ; salva R1 na pilha
	MOV R4,-(R6)          ; salva R1 na pilha

S_PEGA_SEMENTE_BEGIN:
	CLR 65498				; limpa estado do teclado
	JSR R7,_S_LIMPA_VISOR_ITERATIVA

	MOV #16, R0				; tamanho da mensagem (em caracteres)
	MOV END_STR_SEED, R1			; endereco da mensagem a ser escrita no visor
	MOV #65500, R2				; endereco do LED onde deve iniciar a mensagem
	JSR R7, _S_ESCREVER_NO_VISOR
	
	MOV #0, R2				; R2 vai ficar com o tamanho do numero e os
	MOV #0, R3				; digitos em ascii vao sendo armazenados na
	MOV #0, R4				; pilha ate encontrar <enter>
	MOV #0, R5

	MOV #65518, R4				; LCD pointer
	MOV #95, (R4)
	
	JMP S_PEGA_SEMENTE_TEST			; pula para inicio do teste


S_PEGA_SEMENTE_APAGA_ULTIMO_DIGITO:
	CMP #0, R2
	BEQ S_PEGA_SEMENTE_CLEAR_AND_TEST

	DEC R2
	ADD #2, R6
	MOV #0, (R4)
	DEC R4
	MOV #95, (R4)

	JMP S_PEGA_SEMENTE_CLEAR_AND_TEST


S_PEGA_SEMENTE_RECEBEU_NUMERO:
	CMP 65499, #48
	BLT S_PEGA_SEMENTE_CLEAR_AND_TEST
	
	CMP 65499, #57
	BGT S_PEGA_SEMENTE_CLEAR_AND_TEST

	CMP R2, #5
	BGE S_PEGA_SEMENTE_CLEAR_AND_TEST

	MOV 65499, (R4)
	INC R4
	MOV #95, (R4)

	MOV 65499, -(R6)			; push do numero na pilha
	INC R2

S_PEGA_SEMENTE_CLEAR_AND_TEST:
	CLR 65498				; limpa estado do teclado

S_PEGA_SEMENTE_TEST:
     	TST 65498				; verifica se leu caractere
        BEQ S_PEGA_SEMENTE_TEST			; nao leu, continua esperando

	CMP 65499, #8
	BEQ S_PEGA_SEMENTE_APAGA_ULTIMO_DIGITO

	CMP 65499, #13				; campara com enter
	BNE S_PEGA_SEMENTE_RECEBEU_NUMERO	; se nao for igual a enter entao continua
						; recebendo mais numeros.

	MOV #1, R3				; deixe que R3 seja o fator de multiplicacao

S_PEGA_SEMENTE_LOOP:				; caso sim, podemos converter os ASCII
	MOV (R6)+, R1				; guarda ascii atual
	SUB #48, R1				; diminui R1 em 48 para pegar valor numerico
	MOV R3,  R0        			; R0 guarda o fator de multiplicacao        			; multiplicador no R1

	JSR R7,_S_MULTIPLICAR			; Valor vai retornar em R1
	ADD R1, R5				; Soma resultado atual em R5

	; Prepara para multiplicacao por 10 do fator
	MOV R3,  R0
	MOV #10, R1

	JSR R7,_S_MULTIPLICAR
	MOV R1, R3				; Guarda fator atual	
	SOB R2, S_PEGA_SEMENTE_LOOP		; Se R2 > 0 o numero ainda nao acabou

	
	CMP R5, #16383
	BGT S_PEGA_SEMENTE_VALOR_MAIOR

	JMP S_PEGA_SEMENTE_END

S_PEGA_SEMENTE_VALOR_MAIOR:
	MOV #36, R0				; tamanho da mensagem (em caracteres)
	MOV END_STR_SEED_BIG, R1		; endereco da mensagem a ser escrita no visor
	MOV #65500, R2				; endereco do LED onde deve iniciar a mensagem
	JSR R7, _S_ESCREVER_NO_VISOR

	JSR R7,S_ESPERA_QUALQUER_TECLA

	JMP S_PEGA_SEMENTE_BEGIN


S_PEGA_SEMENTE_END:
	MOV (R6)+,R4				; restaura R4
	MOV (R6)+,R3				; restaura R3
	MOV (R6)+,R2				; restaura R2
	MOV (R6)+,R1				; restaura R1
	MOV (R6)+,R0				; restaura R0
	RTS R7					; retorna ao ponto de chamada



;> Subrotina para escrever a mensagem de boas vindas
;> para o usuario.
;>
;> Chamada da subrotina:
;>
;> JSR R7,S_IMPRIME_MENSAGEM_DE_BOAS_VINDAS
;>
S_IMPRIME_MENSAGEM_DE_BOAS_VINDAS:
	MOV #36,        R0			; tamanho da mensagem (em caracteres)
	MOV END_STR_ID, R1			; endereco da mensagem a ser escrita no visor
	MOV #65500,     R2			; endereco do LED onde deve iniciar a mensagem
	JSR R7,         _S_ESCREVER_NO_VISOR

	JSR R7,S_ESPERA_QUALQUER_TECLA		; Espera enter

						; primeira linha de boas vindas
	MOV #36, R0				; tamanho da mensagem (em caracteres)
	MOV END_STR_BVINDAS, R1			; endereco da mensagem a ser escrita no visor
	MOV #65500, R2				; endereco do LED onde deve iniciar a mensagem
	JSR R7, _S_ESCREVER_NO_VISOR

	JSR R7,S_ESPERA_QUALQUER_TECLA		; Espera enter


	; R1 nao precisa ser atualizado porque ele eh incrementado dentro do laco
	; e seu estado final, ja que as linhas tem sempre 36 chars, eh igual ao
	; inicio do proximo vetor.

						; segunda linha de boas vindas
	MOV #36, R0				; tamanho da mensagem (em caracteres)
	MOV #65500, R2				; endereco do LED onde deve iniciar a mensagem
	JSR R7, _S_ESCREVER_NO_VISOR

	JSR R7,S_ESPERA_QUALQUER_TECLA		; Espera enter

						; terceira linha de boas vindas
	MOV #36, R0				; tamanho da mensagem (em caracteres)
	MOV #65500, R2				; endereco do LED onde deve iniciar a mensagem
	JSR R7, _S_ESCREVER_NO_VISOR

	JSR R7,S_ESPERA_QUALQUER_TECLA		; Espera enter

						; quarta linha de boas vindas
	MOV #36, R0				; tamanho da mensagem (em caracteres)
	MOV #65500, R2				; endereco do LED onde deve iniciar a mensagem
	JSR R7, _S_ESCREVER_NO_VISOR

	JSR R7,S_ESPERA_QUALQUER_TECLA		; Espera enter

	RTS R7					; retorna ao ponto de chamada



;> Subrotina que espera que o usuario digite **ENTER**
;> ou **ESC** para continuar a execucao do programa
;>
;> Chamada da subrotina:
;>
;> JSR R7,S_ESPERA_ENTER_ESC
;>
S_ESPERA_ENTER_ESC:
	CLR 65498			; limpa estado do teclado

S_ESPERA_ENTER_ESC_RETEST:
     	TST 65498			; verifica se leu caractere
        BEQ S_ESPERA_ENTER_ESC_RETEST	; nao leu, continua esperando

	CMP 65499,#13			; se nao for ENTER
	BEQ S_ESPERA_ENTER_ESC_FIM	; vai esperar outra tecla

	CMP 65499,#27			; se nao for ENTER
	BEQ S_ESPERA_ENTER_ESC_FIM	; vai esperar outra tecla

	JMP S_ESPERA_ENTER_ESC

S_ESPERA_ENTER_ESC_FIM:
	RTS R7



;> Subrotina que espera que o usuario digite **ENTER**
;> para continuar a execucao do programa
;>
;> Chamada da subrotina:
;>
;> JSR R7,S_ESPERA_ENTER
;>
S_ESPERA_ENTER:
	CLR 65498			; limpa estado do teclado

S_ESPERA_ENTER_RETEST:
     	TST 65498			; verifica se leu caractere
        BEQ S_ESPERA_ENTER_RETEST	; nao leu, continua esperando

	CMP 65499,#13			; se nao for ENTER
	BNE S_ESPERA_ENTER		; vai esperar outra tecla
	RTS R7				; leu, volta ao ponto de chamada





;> Subrotina que espera que o usuario digite uma tecla qualquer
;> para continuar a execucao do programa
;>
;> Chamada da subrotina:
;>
;> JSR R7,S_ESPERA_QUALQUER_TECLA
;>
S_ESPERA_QUALQUER_TECLA:
	CLR 65498				; limpa estado do teclado

S_ESPERA_QUALQUER_TECLA_RETEST:
     	TST 65498				; verifica se leu caractere
        BEQ S_ESPERA_QUALQUER_TECLA_RETEST	; nao leu, continua esperando
	RTS R7					; leu, volta ao ponto de chamada








;>
;> Subrotina iterativa para "limpar" o visor (279 acessos)
;>
;> Chamada da subrotina:
;>
;> JSR R7,_S_LIMPA_VISOR_ITERATIVA
;>
          
_S_LIMPA_VISOR_ITERATIVA:
          MOV R0,-(R6)          ; salva R0 na pilha
          MOV R1,-(R6)          ; salva R1 na pilha
          MOV #65500,R1         ; move end. do visor p/R1
          MOV #36,R0            ; move 36 para contador
__OUTRO_LED:
          CLR (R1)              ; limpa 1 LED do visor
          INC R1                ; aponta p/LED seguinte
          SOB R0,__OUTRO_LED    ; subtrai 1 do contador
                                ; se <> 0, repete o laco
          MOV (R6)+,R1          ; restaura R1
          MOV (R6)+,R0          ; restaura R0
          RTS R7                ; retorna ao ponto de chamada

;>
;>
;> Subrotina para escrever mensagem no visor
;>
;> Chamada da subrotina:
;>
;> MOV #tammensagem,R0          ; tamanho da mensagem (em caracteres)
;> MOV #endmensagem,R1          ; endereco da mensagem a ser escrita no visor
;> MOV #endvisor,R2             ; endereco do LED onde deve iniciar a mensagem
;> JSR R7,_S_ESCREVER_NO_VISOR
;>

_S_ESCREVER_NO_VISOR:
__VOLTA_ESCR:
          MOV (R1),R3           ; coloca 2 caracteres em R3
          ASR R3                ; alinha primeiro caractere
          ASR R3                ; a direita do registrador,
          ASR R3                ; porque quando se escreve
          ASR R3                ; na memoria a partir do
          ASR R3                ; endereco 65500 apenas o byte
          ASR R3                ; menos significativo e' escrito
          ASR R3                ; na posicao correspondente
          ASR R3                ; a um LED do visor
          MOV R3,(R2)           ; move para o visor
          SOB R0,__SEGUNDO      ; se ja moveu todo o texto,
          RTS R7                ; retorna ao ponto de chamada
                                ; senao, vai mover o segundo
                                ; caractere da mesma palavra
__SEGUNDO:
          INC R2                ; aponta para proximo LED
          BEQ __FIM_VISOR2      ; fim do visor - volta ao LED 00
__CONTINUA2:
          MOV (R1)+,R3          ; mesmos 2 caracteres em R3 e
                                ; incrementa apontador do texto
          MOV R3,(R2)           ; desta vez, move o segundo byte
          SOB R0,__PROXIMO_LED  ; se ja moveu todo o texto,
          RTS R7                ; retorna ao ponto de chamada
__PROXIMO_LED:
          INC R2                ; senao, aponta proximo LED
          BNE __VOLTA_ESCR      ; e repete o laco
                                ; fim do visor - volta ao LED 00
__FIM_VISOR1:
          MOV #65500,R2         ; aponta para primeiro LED
          BR  __VOLTA_ESCR      ; volta a escrever no visor
__FIM_VISOR2:
          MOV #65500,R2         ; aponta para primeiro LED
          BR  __CONTINUA2       ; volta a escrever no visor
;>
;>
;> Subrotina para multiplicar 2 inteiros positivos de 16 bits
;>
;> Chamada da subrotina:
;>
;> MOV #multiplicando,R0        ; multiplicando no R0
;> MOV #multiplicador,R1        ; multiplicador no R1
;> JSR R7,_S_MULTIPLICAR
;>
;> No retorno da subrotina:
;> - R0 contém os 16 msbits do produto
;> - R1 contém os 16 lsbits do produto
;> - Código de condição V:
;>   V = 0 indica que a parte mais significativa do produto (R0) é zero
;>   V = 1 indica que não é zero, ou seja: se for desprezada ocorre estouro
;>
_S_MULTIPLICAR:
          MOV R2,-(R6)          ; salva R2 na pilha
          MOV R3,-(R6)          ; salva R3 na pilha
          MOV #16,R2            ; inicializa contador
          CLR R3                ; limpa R3
__INICIO_LACO: 
          ROR R1                ; lsb do multiplicad. em C
          BCC __NAO_SOMAR       ; se era zero, nao soma
          ADD R0,R3             ; acumula multiplicando
                                ; no produto parcial
__NAO_SOMAR:
          ROR R3                ; lsb de R3 vai para C
          BCC __FIM_LACO        ; se era zero, sai do laco
          ADD #32768,R1         ; soma 1 ao bit 15 de R1
__FIM_LACO:
          SOB R2,__INICIO_LACO  ; decrementa contador e
                                ; repete se <> 0
          MOV R3,R0             ; resultado de R3 para R0
          MOV (R6)+,R3          ; restaura R3
          MOV (R6)+,R2          ; restaura R2
          TST R0                ; se R0 <> 0
          BNE __ALERTA_ESTOURO  ; vai indicar estouro
          CCC V                 ; senao, desliga V
          RTS R7                ; retorna ao progr. princ.
__ALERTA_ESTOURO:
          SCC V                 ; liga indicador: estouro
          RTS R7                ; retorna ao ponto de chamada
;>
;>
;> Dividir int. positivo de 32 bits por um de 16 bits
;>
;> Chamada da subrotina:
;>
;> MOV #msbitsdividendo,R0      ; 16 bits mais significativos do dividendo
;> MOV #lsbitsdividendo,R1      ; 16 bits menos significativos do dividendo
;> MOV #divisor,R2              ; divisor (16 bits)
;> JSR R7,_S_DIVIDIR
;>
;> No retorno da subrotina:
;> - R0 contém o quociente (16 bits)
;> - R1 contém o resto (16 bits)
;> - R2 ainda contém o divisor, inalterado (16 bits)
;> - Códigos de condição:
;>   V = 1 indica que ocorreu estouro na divisão (quociente não cabe em 16 bits)
;>   Z = 1 indica que ocorreu uma tentativa de divisão por zero
;>   Nestes dois casos, R0, R1 e R2 não são alterados pela subrotina
;>

_S_DIVIDIR:
          TST R2                ; testa divisor
          BNE __NAO_ZERO        ; se <> zero, continua
          CCC V                 ; indica divisao por zero
          RTS R7                ; retorna ao ponto de chamada

__NAO_ZERO:
          CMP R0,R2             ; testa se dividendo(msb)
                                ; e' >= que o divisor
          BCC __INDICA_ESTOURO  ; se for, indicar estouro
                                ; note: BCC equivale a um
                                ; BGE para int. positivos
;>
          MOV R3,-(R6)          ; salva R3 na pilha
          MOV R4,-(R6)          ; salva R4 na pilha
          MOV R5,-(R6)          ; salva R5 na pilha
          MOV R0,R3             ; copia dividendo para
          MOV R1,R4             ; R3 e R4 (=q no final)
          MOV #16,R5            ; inicializa contador
          ASL R4                ; desloca dividendo p/a
          ROL R3                ; esquerda e abre espaco
          BCS __SUBTRAI_DIVISOR ; p/um bit do quociente
          CMP R3,R2             ; se n+1 msbits do divid.
          BCS __BIT_ZERO        ; maiores que divisor (= BLT p/inteiros positivos)
__SUBTRAI_DIVISOR:
          SUB R2,R3             ; subtrai divisor e
          INC R4                ; ajusta bit do quociente
__BIT_ZERO:
          SOB R5,16             ; decr. R5; se <>0, repete
          MOV R3,R1             ; copia resto para R1
          MOV R4,R0             ; copia quociente p/R0
          MOV (R6)+,R5          ; restaura
          MOV (R6)+,R4          ; registradores
          MOV (R6)+,R3          ; de trabalho
          CCC V Z               ; limpa cod. de condicao
          RTS R7                ; retorna ao ponto de chamada
;>
__INDICA_ESTOURO:
          SCC V                 ; indica overflow e nao
          CCC Z                 ; divisao por zero
          RTS R7                ; retorna ao ponto de chamada

;>
;> Identificacao da versao da biblioteca - e' exibida no visor
;>
          ORG 65500             ; ajusta endereco de inicio (LED 00 do visor)
          DAB '* BibCesar.ced V. 10 -- 09/05/2011 *'





;>---------------------------------------------<
;>           TEXTOS USADOS NO PROGRAMA         <
;>---------------------------------------------<
            ORG 16384
STR_ID:     DAB 'Leonardo Richter Korndorfer - 213941'
END_STR_ID: DW STR_ID


;>
;> Mensagem de boas vindas
;>
STR_BVINDAS:     DAB 'Este programa calcula o produto de >'
                 DAB 'dois numeros pseudo randomicos,    >'
                 DAB 'criados com LFSR de 14bits e exibe >'
                 DAB 'este produto na tela.               '
END_STR_BVINDAS: DW  STR_BVINDAS

STR_SEQ_PROD:    DAB 'Sequencia de produtos calculado:    '
END_STR_SEQ_PROD:DW  STR_SEQ_PROD


STR_SEED:        DAB 'Digite semente: '
END_STR_SEED:    DW  STR_SEED

STR_SEED_BIG:     DAB 'Valor nao pode ser > 16383!         '
END_STR_SEED_BIG: DW  STR_SEED_BIG

STR_ESC_PRESSED:     DAB 'Deseja gerar uma nova squencia?(S/N)'
END_STR_ESC_PRESSED: DW STR_ESC_PRESSED

STR_SORN_ONLY:     DAB 'Apenas S/s ou N/n                   '
END_STR_S_OR_N_ONLY: DW STR_SORN_ONLY

STR_BYEBYE:        DAB 'Eh isso ai entao pessoal!           '
END_STR_BYEBYE:    DW STR_BYEBYE

VAR_seed_number:   DW 0
VAR_first_factor:  DW 0
VAR_second_factor: DW 0
VAR_loop_number:   DW 0
VAR_last_lcd_pos:  DW 65500





